//BFS
#include<bits/stdc++.h>
bool isCyclic(int node,unordered_map<int,list<int>>adj,unordered_map<int,bool>&visited){
    unordered_map<int,int>parent;
    queue<int>q;
    q.push(node);
    parent[node]=-1;
    visited[node]=true;
    while(!q.empty()){
        int front=q.front();
        q.pop();
        for(auto i:adj[front]){
            if(visited[i]==true && i!=parent[front]){
                return true;
            }
            else if(!visited[i]){
                visited[i]=true;
                q.push(i);
                parent[i]=front;
            }
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>>adj;
    for(int i=0;i<m;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    unordered_map<int,bool>visited;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            if(isCyclic(i,adj,visited)){
                return "Yes";
            }
        }
    }
    return "No";
}

// DFS
#include<bits/stdc++.h>
bool isCyclicDFS(int node,int parent,unordered_map<int,list<int>>&adj,unordered_map<int,bool>&visited){
    visited[node]=true;
    for(auto i:adj[node]){
        if(!visited[i]){
            if(isCyclicDFS(i,node,adj,visited)){
                return true;
            }
        }
        else if(i!=parent){
            return true;;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>>adj;
    for(int i=0;i<m;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    unordered_map<int,bool>visited;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            if(isCyclicDFS(i,-1,adj,visited)){
                return "Yes";
            }
        }
    }
    return "No";
}
